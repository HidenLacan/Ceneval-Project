# Generated by Django 4.2.7 on 2025-08-19 02:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('core', '0009_configuracionalgoritmo'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='configuracionalgoritmo',
            options={'ordering': ['-fecha_creacion'], 'verbose_name': 'Configuración de Algoritmo', 'verbose_name_plural': 'Configuraciones de Algoritmos'},
        ),
        migrations.RemoveField(
            model_name='configuracionalgoritmo',
            name='descripcion',
        ),
        migrations.RemoveField(
            model_name='configuracionalgoritmo',
            name='modificado_por',
        ),
        migrations.AddField(
            model_name='configuracionalgoritmo',
            name='creado_por',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='configuraciones_algoritmo', to=settings.AUTH_USER_MODEL),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='configuracionalgoritmo',
            name='notas',
            field=models.TextField(blank=True, help_text='Notas sobre la configuración', null=True),
        ),
        migrations.AlterField(
            model_name='configuracionalgoritmo',
            name='algoritmo_por_defecto',
            field=models.CharField(choices=[('kernighan_lin', 'Kernighan-Lin'), ('kmeans', 'K-Means Clustering'), ('voronoi', 'Voronoi Diagram'), ('random', 'Random Division'), ('dbscan', 'DBSCAN Clustering'), ('spectral', 'Spectral Clustering')], default='kernighan_lin', help_text='Algoritmo que se usará por defecto en el sistema', max_length=20),
        ),
        migrations.CreateModel(
            name='RutaCompletada',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fecha_inicio', models.DateTimeField(help_text='Cuándo comenzó la ruta')),
                ('fecha_fin', models.DateTimeField(help_text='Cuándo terminó la ruta')),
                ('tiempo_real_minutos', models.FloatField(help_text='Tiempo real que tomó completar la ruta en minutos')),
                ('tiempo_estimado_minutos', models.FloatField(help_text='Tiempo que se estimó originalmente en minutos')),
                ('distancia_km', models.FloatField(help_text='Distancia total de la ruta en kilómetros')),
                ('num_nodos', models.IntegerField(help_text='Número de nodos/paradas en la ruta')),
                ('area_zona_m2', models.FloatField(help_text='Área de la zona asignada en metros cuadrados')),
                ('densidad_nodos_km2', models.FloatField(help_text='Densidad de nodos por km²')),
                ('densidad_calles_m_km2', models.FloatField(help_text='Densidad de calles en metros por km²')),
                ('experiencia_empleado_dias', models.IntegerField(help_text='Días de experiencia del empleado')),
                ('hora_inicio', models.IntegerField(help_text='Hora de inicio (0-23)')),
                ('dia_semana', models.IntegerField(help_text='Día de la semana (0=Lunes, 6=Domingo)')),
                ('temperatura_celsius', models.FloatField(blank=True, help_text='Temperatura en grados Celsius', null=True)),
                ('condiciones_clima', models.CharField(blank=True, help_text='Condiciones climáticas', max_length=50, null=True)),
                ('eficiencia_porcentaje', models.FloatField(help_text='Eficiencia real vs estimada (0-100%)')),
                ('velocidad_promedio_kmh', models.FloatField(help_text='Velocidad promedio en km/h')),
                ('algoritmo_usado', models.CharField(choices=[('kernighan_lin', 'Kernighan-Lin'), ('current', 'Kernighan-Lin (Current)'), ('kmeans', 'K-Means Clustering'), ('voronoi', 'Voronoi Diagram'), ('random', 'Random Division'), ('dbscan', 'DBSCAN Clustering'), ('spectral', 'Spectral Clustering')], max_length=20)),
                ('notas', models.TextField(blank=True, null=True)),
                ('fecha_registro', models.DateTimeField(auto_now_add=True)),
                ('colonia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rutas_completadas', to='core.coloniaprocesada')),
                ('configuracion_ruta', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='completadas', to='core.configuracionruta')),
                ('empleado', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rutas_completadas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Ruta Completada',
                'verbose_name_plural': 'Rutas Completadas',
                'ordering': ['-fecha_fin'],
            },
        ),
        migrations.CreateModel(
            name='ModeloPrediccionTiempo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre del modelo', max_length=100)),
                ('version', models.CharField(help_text='Versión del modelo', max_length=20)),
                ('estado', models.CharField(choices=[('entrenando', 'Entrenando'), ('activo', 'Activo'), ('inactivo', 'Inactivo'), ('error', 'Error')], default='inactivo', max_length=20)),
                ('accuracy_score', models.FloatField(blank=True, help_text='Precisión del modelo (0-1)', null=True)),
                ('mae_score', models.FloatField(blank=True, help_text='Error absoluto medio', null=True)),
                ('r2_score', models.FloatField(blank=True, help_text='Coeficiente de determinación R²', null=True)),
                ('n_estimators', models.IntegerField(default=100, help_text='Número de árboles en el Random Forest')),
                ('max_depth', models.IntegerField(blank=True, help_text='Profundidad máxima de los árboles', null=True)),
                ('min_samples_split', models.IntegerField(default=2, help_text='Mínimo de muestras para dividir un nodo')),
                ('num_muestras_entrenamiento', models.IntegerField(default=0, help_text='Número de muestras usadas para entrenar')),
                ('features_usadas', models.JSONField(default=list, help_text='Lista de features utilizadas')),
                ('modelo_archivo', models.FileField(blank=True, null=True, upload_to='modelos_prediccion/')),
                ('scaler_archivo', models.FileField(blank=True, null=True, upload_to='modelos_prediccion/')),
                ('fecha_entrenamiento', models.DateTimeField(auto_now_add=True)),
                ('fecha_ultima_actualizacion', models.DateTimeField(auto_now=True)),
                ('notas', models.TextField(blank=True, null=True)),
                ('entrenado_por', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modelos_entrenados', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Modelo de Predicción de Tiempo',
                'verbose_name_plural': 'Modelos de Predicción de Tiempo',
                'ordering': ['-fecha_entrenamiento'],
            },
        ),
    ]
