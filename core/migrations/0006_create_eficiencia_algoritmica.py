# Generated by Django 5.2.1 on 2025-08-09 23:50

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('core', '0005_chatmessage_chatparticipant'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EficienciaAlgoritmica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('algoritmo_tipo', models.CharField(choices=[('kernighan_lin', 'Kernighan-Lin'), ('current', 'Kernighan-Lin (Current)'), ('kmeans', 'K-Means Clustering'), ('voronoi', 'Voronoi Diagram'), ('random', 'Random Division')], max_length=20)),
                ('num_empleados', models.IntegerField()),
                ('fecha_ejecucion', models.DateTimeField(auto_now_add=True)),
                ('tiempo_ejecucion_segundos', models.FloatField(help_text='Tiempo de ejecución del algoritmo en segundos')),
                ('memoria_usada_mb', models.FloatField(help_text='Memoria RAM utilizada en MB')),
                ('balance_zonas_porcentaje', models.FloatField(help_text='Balance entre zonas (0-100%)')),
                ('eficiencia_rutas_porcentaje', models.FloatField(help_text='Eficiencia de las rutas generadas (0-100%)')),
                ('equidad_cargas_porcentaje', models.FloatField(help_text='Equidad en la distribución de cargas (0-100%)')),
                ('compacidad_porcentaje', models.FloatField(help_text='Compacidad de las zonas generadas (0-100%)')),
                ('total_nodos', models.IntegerField(help_text='Total de nodos en el grafo')),
                ('total_aristas', models.IntegerField(help_text='Total de aristas en el grafo')),
                ('nodos_zona1', models.IntegerField(help_text='Nodos asignados a la zona 1')),
                ('nodos_zona2', models.IntegerField(help_text='Nodos asignados a la zona 2')),
                ('area_total_m2', models.FloatField(help_text='Área total procesada en metros cuadrados')),
                ('area_zona1_m2', models.FloatField(help_text='Área de la zona 1 en metros cuadrados')),
                ('area_zona2_m2', models.FloatField(help_text='Área de la zona 2 en metros cuadrados')),
                ('longitud_total_m', models.FloatField(help_text='Longitud total de calles en metros')),
                ('longitud_zona1_m', models.FloatField(help_text='Longitud de calles en zona 1 en metros')),
                ('longitud_zona2_m', models.FloatField(help_text='Longitud de calles en zona 2 en metros')),
                ('densidad_nodos_zona1_por_km2', models.FloatField(help_text='Densidad de nodos por km² en zona 1')),
                ('densidad_nodos_zona2_por_km2', models.FloatField(help_text='Densidad de nodos por km² en zona 2')),
                ('densidad_calles_zona1_m_por_km2', models.FloatField(help_text='Densidad de calles en metros por km² en zona 1')),
                ('densidad_calles_zona2_m_por_km2', models.FloatField(help_text='Densidad de calles en metros por km² en zona 2')),
                ('zonas_generadas', models.JSONField(blank=True, help_text='Información detallada de las zonas generadas', null=True)),
                ('parametros_algoritmo', models.JSONField(blank=True, help_text='Parámetros específicos utilizados por el algoritmo', null=True)),
                ('metadatos_ejecucion', models.JSONField(blank=True, help_text='Metadatos adicionales de la ejecución', null=True)),
                ('notas', models.TextField(blank=True, help_text='Notas u observaciones sobre esta ejecución', null=True)),
                ('colonia', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='eficiencias_algoritmo', to='core.coloniaprocesada')),
                ('usuario_ejecutor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analisis_realizados', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Eficiencia Algorítmica',
                'verbose_name_plural': 'Eficiencias Algorítmicas',
                'ordering': ['-fecha_ejecucion'],
                'indexes': [models.Index(fields=['colonia', 'algoritmo_tipo'], name='core_eficie_colonia_57da69_idx'), models.Index(fields=['fecha_ejecucion'], name='core_eficie_fecha_e_0b8540_idx'), models.Index(fields=['algoritmo_tipo', 'num_empleados'], name='core_eficie_algorit_b6cbc8_idx')],
            },
        ),
    ]
